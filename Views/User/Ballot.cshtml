@{
    var ElectionId = ViewBag.ElectionId;
    var electionTypes = ViewBag.ElectionTypes as string; // Get election types
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>eElection</title>
    <meta name="description" content="">
    <meta name="keywords" content="">

    <!-- Favicons -->
    <link href="~/assetss/img/favicon.png" rel="icon">
    <link href="~/assetss/img/apple-touch-icon.png" rel="apple-touch-icon">

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Raleway:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="~/assetss/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/assetss/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="~/assetss/vendor/aos/aos.css" rel="stylesheet">
    <link href="~/assetss/vendor/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="~/assetss/vendor/swiper/swiper-bundle.min.css" rel="stylesheet">

    <!-- Main CSS File -->
    <link href="~/assetss/css/main.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- =======================================================
    * Template Name: eNno
    * Template URL: https://bootstrapmade.com/enno-free-simple-bootstrap-template/
    * Updated: Aug 07 2024 with Bootstrap v5.3.3
    * Author: BootstrapMade.com
    * License: https://bootstrapmade.com/license/
    ======================================================== -->
</head>

<body class="index-page">

    <header id="header" class="header d-flex align-items-center sticky-top">
        <div class="container-fluid container-xl position-relative d-flex align-items-center">

            <a href="index.html" class="logo d-flex align-items-center me-auto">
                <!-- Uncomment the line below if you also wish to use an image logo -->
                <!-- <img src="~/assetss/img/logo.png" alt=""> -->
                <h1 class="sitename">eElection</h1>
            </a>

            <nav id="navmenu" class="navmenu">
                <ul>
                    <li><a asp-controller="User" asp-action="Homes">Home</a></li>
                    <li><a asp-controller="User" asp-action="Candidate">Candidate</a></li>
                    <li><a asp-controller="User" asp-action="Elections">Election</a></li>
                    <li><a asp-controller="User" asp-action="Profile">Profile</a></li>
                    @* <li><a asp-controller="User" asp-action="Logout">Logout</a></li> *@
                    <li class="nav-item dropdown">
                        <form id="logoutForm" asp-controller="Admin" asp-action="Logout" method="post" style="display: none;">
                            <button type="submit"></button>
                        </form>
                        <a class="dropdown-item" href="#" onclick="document.getElementById('logoutForm').submit(); return false;">
                            <i class="mdi mdi-logout me-2 text-primary"></i> Signout
                        </a>
                    </li>
                </ul>
                <i class="mobile-nav-toggle d-xl-none bi bi-list"></i>
            </nav>


        </div>
    </header>
    <main class="main container py-4">
        <div class="row">
            <!-- Ballot Forms -->
            <div class="col-md-8">
                <form action="/" method="post" id="voteForm">
                    @if (ViewBag.ElectionId == null || string.IsNullOrEmpty(ViewBag.ElectionTypes))
                    {
                        <div class="alert alert-danger">No election selected.</div>
                    }
                    else
                    {
                        <div class="card mb-3 election-section">
                            <div class="card-header bg-primary text-white">@ViewBag.ElectionTypes</div>
                            <div class="card-body">
                                <div id="debug-info" class="alert alert-info" style="display: none;">
                                    <strong>Debug Info:</strong>
                                    <div id="debug-content"></div>
                                </div>

                                <table class="table table-sm">
                                    @foreach (var position in ViewBag.Positions)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@position.PositionName</strong>
                                                @if (position.MaxCandidates > 1)
                                                {
                                                    <small class="text-muted">(Select up to @position.MaxCandidates)</small>
                                                }
                                            </td>
                                            <td>
                                                <div class="candidate-container"
                                                     data-position="@position.PositionName"
                                                     data-positionid="@position.PositionId"
                                                     data-max="@position.MaxCandidates">
                                                    <!-- Candidates will be loaded here -->
                                                    <div class="text-center">
                                                        <div class="spinner-border spinner-border-sm" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    }

                    <!-- Hidden fields for form submission -->
                    <input type="hidden" id="electionId" name="electionId" value="@ViewBag.ElectionId" />
                    <input type="hidden" id="voterId" name="voterId" value="@(ViewBag.VoterId ?? 0)" />

                    <div class="row">
                        <div class="col">
                            <button id="submitVote" class="btn btn-success mt-3">Submit Vote</button>

                            <!-- Add a debug button for development -->
                            @* @if (System.Diagnostics.Debugger.IsAttached || true) *@
                            @* { *@
                            @*     <button id="debugBtn" type="button" class="btn btn-secondary mt-3 ms-2">Debug</button> *@
                            @* } *@
                        </div>
                    </div>
                </form>

            </div>


       
        </div>
    </main>




    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

    <!-- Preloader -->
    <div id="preloader"></div>

    <!-- Vendor JS Files -->
    <script src="~/assetss/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/assetss/vendor/php-email-form/validate.js"></script>
    <script src="~/assetss/vendor/aos/aos.js"></script>
    <script src="~/assetss/vendor/glightbox/js/glightbox.min.js"></script>
    <script src="~/assetss/vendor/purecounter/purecounter_vanilla.js"></script>
    <script src="~/assetss/vendor/imagesloaded/imagesloaded.pkgd.min.js"></script>
    <script src="~/assetss/vendor/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="~/assetss/vendor/swiper/swiper-bundle.min.js"></script>

    <!-- Main JS File -->
    <script src="~/assetss/js/main.js"></script>


    <script>
        var electionType = "@ViewBag.ElectionType";
        console.log("Election Type received:", electionType);
    </script>

    <script>
        $(document).ready(function () {
            $(".candidate-dropdown").each(function () {
                var position = $(this).data("position");
                var maxCandidates = $(this).data("max");
                var selectElement = $(this);

                $.ajax({
                    url: "/User/GetCandidates",
                    type: "GET",
                    data: { position: position },
                    success: function (data) {
                        $.each(data, function (index, candidate) {
                            selectElement.append(new Option(candidate.name, candidate.id));
                        });
                    }
                });

                selectElement.on("change", function () {
                    var selectedOptions = $(this).find("option:selected");
                    if (selectedOptions.length > maxCandidates) {
                        alert("You can only select up to " + maxCandidates + " candidates for " + position);
                        selectedOptions.last().prop("selected", false);
                    }
                });
            });
        });
</script>


    <script>
        // Add a debug button helper for development
        $(document).ready(function() {
            $("#debugBtn").click(function() {
                let debug = "";

                $(".candidate-container").each(function() {
                    let container = $(this);
                    let posName = container.attr("data-position");
                    let posId = container.attr("data-positionid");
                    let selected = container.find("input:checked").length;

                    debug += `<p>Position: ${posName} (ID: ${posId}), Selected: ${selected}</p>`;
                });

                $("#debug-content").html(debug);
                $("#debug-info").show();
            });
        });
    </script>

    <script>
                  $(document).ready(function () {
            let positionMap = {};

            function loadPositions() {
                $.ajax({
                    url: '/User/GetPositions',
                    type: 'GET',
                    success: function (response) {
                        if (!response.success || !response.data) {
                            console.error("❌ No positions received from API:", response.message);
                            return;
                        }

                        positionMap = {};
                        response.data.forEach(position => {
                            if (!position.PositionName) return;
                            let formattedPositionName = position.PositionName.toLowerCase().trim();
                            positionMap[formattedPositionName] = position.PositionId;
                        });

                        console.log("📌 Position Map:", positionMap);
                        $(".candidate-container").each(function () {
                            let positionName = $(this).attr("data-position").toLowerCase().trim();
                            let positionId = positionMap[positionName];

                            if (positionId) {
                                $(this).attr("data-positionid", positionId);
                                console.log(`✅ Assigned '${positionName}' → ID: ${positionId}`);
                            }
                        });

                        loadAllCandidates();
                    },
                    error: function (xhr) {
                        console.error("❌ Error retrieving positions:", xhr.responseText);
                    }
                });
            }

            function loadCandidates(positionName) {
                let container = $(`div[data-position='${positionName}']`);

                if (!container.length) {
                    console.warn(`⚠️ Container not found for '${positionName}'`);
                    return;
                }

                $.ajax({
                    url: '/User/GetCandidatesByPosition',
                    type: 'GET',
                    data: { positionName: positionName },
                    success: function (response) {
                        container.empty();

                        if (response.success && response.data.length > 0) {
                            const maxCandidates = parseInt(container.attr("data-max")) || 1;
                            const useRadio = maxCandidates === 1;
                            const inputType = useRadio ? 'radio' : 'checkbox';
                            const inputName = useRadio ? `candidate-${positionName.replace(/\s+/g, '-')}` : '';

                            // Store the positionId from the first candidate
                            if (response.data.length > 0 && response.data[0].positionId) {
                                container.attr("data-positionid", response.data[0].positionId);
                            }

                            // Add selection counter for multiple selections
                            if (!useRadio) {
                                container.append(`
                                    <div class="selection-counter mb-2">
                                        Selected: <span class="selected-count">0</span> / ${maxCandidates}
                                    </div>
                                `);
                            }

                            response.data.forEach(candidate => {
                                const inputId = `candidate-${candidate.candidateId}`;
                                container.append(`
                                    <div class="form-check">
                                        <input class="form-check-input candidate-option"
                                            type="${inputType}"
                                            name="${inputName}"
                                            id="${inputId}"
                                            value="${candidate.candidateId}"
                                            data-positionid="${candidate.positionId}">
                                        <label class="form-check-label" for="${inputId}">
                                            ${candidate.fullName}
                                        </label>
                                    </div>
                                `);
                            });

                            // Add event listeners for checkboxes to enforce max selection
                            if (!useRadio) {
                                container.find('input[type="checkbox"]').on('change', function() {
                                    const maxAllowed = parseInt(container.attr("data-max"));
                                    const checkedBoxes = container.find('input[type="checkbox"]:checked');

                                    // Update counter
                                    container.find('.selected-count').text(checkedBoxes.length);

                                    if (checkedBoxes.length > maxAllowed) {
                                        alert(`You can only select up to ${maxAllowed} candidates for ${positionName}`);
                                        $(this).prop('checked', false);
                                        container.find('.selected-count').text(maxAllowed);
                                    }
                                });
                            }
                        } else {
                            container.append('<div class="alert alert-warning">No candidates found</div>');
                        }
                    },
                    error: function (xhr) {
                        console.error(`❌ Error retrieving candidates for ${positionName}:`, xhr.responseText);
                        container.empty().append('<div class="alert alert-danger">Error loading candidates</div>');
                    }
                });
            }

            function loadAllCandidates() {
                $(".candidate-container").each(function () {
                    let positionName = $(this).attr("data-position");
                    if (positionName) {
                        loadCandidates(positionName);
                    }
                });
            }

            $("#submitVote").click(function (e) {
                e.preventDefault();

                // Get the voter ID from a hidden field or session
                let voterId = $("#voterId").val() || 0; // Use a hidden field or default to 0
                let electionId = parseInt($("#electionId").val());

                if (!electionId) {
                    alert("⚠️ Election ID is missing!");
                    return;
                }

                let votes = [];
                let hasSelection = false;

                // Debug information
                console.log("Looking for votes in containers:", $(".candidate-container").length);

                $(".candidate-container").each(function () {
                    let container = $(this);
                    let positionId = parseInt(container.attr("data-positionid"));
                    let positionName = container.attr("data-position");
                    let maxAllowed = parseInt(container.attr("data-max")) || 1;

                    // Find all checked inputs within this container
                    let selectedInputs = container.find('input:checked');

                    console.log(`Position: ${positionName}, ID: ${positionId}, Selected: ${selectedInputs.length}`);

                    if (selectedInputs.length > 0) {
                        hasSelection = true;

                        if (selectedInputs.length > maxAllowed) {
                            alert(`⚠️ You can only select up to ${maxAllowed} candidates for ${positionName}.`);
                            return false; // Stop execution
                        }

                        selectedInputs.each(function() {
                            let candidateId = parseInt($(this).val());
                            let candidateVote = {
                                VoterId: voterId,
                                ElectionId: electionId,
                                PositionId: positionId,
                                CandidateId: candidateId
                            };

                            console.log("Adding vote:", candidateVote);
                            votes.push(candidateVote);
                        });
                    }
                });

                console.log("Total votes collected:", votes.length);

                if (!hasSelection || votes.length === 0) {
                    alert("⚠️ Please select at least one candidate.");
                    return;
                }

                // Show loading state
                $("#submitVote").prop("disabled", true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...');

                console.log("Submitting votes:", JSON.stringify(votes));

                $.ajax({
                    url: "/User/SubmitVote",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(votes),
                    success: function (response) {
                        $("#submitVote").prop("disabled", false).text("Submit Vote");

                        if (response.success) {
                            alert("✅ Vote submitted successfully!");
                            location.reload();
                        } else {
                            alert("❌ Server error: " + (response.message || "Unknown error"));
                            console.error("Server error:", response);
                        }
                    },
                    error: function (xhr) {
                        $("#submitVote").prop("disabled", false).text("Submit Vote");
                        console.error("Submit vote error:", xhr.responseText);
                        alert("❌ An error occurred while submitting your vote. Check console for details.");
                    }
                });
            });

            loadPositions();
        });
    </script>

   
</body>

</html>